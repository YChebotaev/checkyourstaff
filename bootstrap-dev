import { exec } from 'node:child_process'
import { $, within, minimist } from 'zx'
import { GenericContainer } from 'testcontainers'
import createKnex from 'knex'

const argv = minimist(process.argv.slice(3), {
  string: ['only'],
  boolean: ['skip-tunnels', 'only-spin-db'],
})

const only = argv.only
const skipTunnels = argv['skip-tunnels']
const onlySpinDb = argv['only-spin-db']

/**
 * 
 * @param port {number}
 * @param hostname {string}
 */
const startLoophole = (port, hostname) => {
  return new Promise((resolve, reject) => {
    const p = exec(`./loophole http ${port} localhost --hostname ${hostname}`)
    p.once('exit', resolve)
    p.once('error', reject)
    p.stdout?.pipe(process.stdout)
    p.stderr?.pipe(process.stderr)
  })
}

/**
 * 
 * @param projects {string[]}
 */
const npmDev = async (projects) => {
  await Promise.all(
    projects.map(name => within(async () => {
      // $.cwd = `./${name}`

      console.log('Starting service "%s"', name)

      // const p = exec('npm run dev')
      const p = exec(`npm run dev -w ${name}`)
      p.stdout?.pipe(process.stdout)
      p.stderr?.pipe(process.stderr)
    }))
  )
}

const startContainers = async (only = []) => {
  return (await Promise.all(
    Object.entries({
      'redis': { port: 6379 },
      'postgres': {
        port: 5432,
        env: {
          POSTGRES_DB: "postgres",
          POSTGRES_USER: "postgres",
          POSTGRES_PASSWORD: "postgres",
        }
      },
      'dpage/pgadmin4': {
        port: {
          container: 80,
          host: 8080
        },
        env: {
          PGADMIN_DEFAULT_EMAIL: 'yury.79120345101@gmail.com',
          PGADMIN_DEFAULT_PASSWORD: 'admin'
        }
      },
    }).filter(([name, port]) => {
      if (!only || only.length === 0) return true

      return only.includes(name)
    })
      .map(([name, { port, env }]) => {
        const container = new GenericContainer(name)

        if (typeof port === 'number') {
          container.withExposedPorts({ container: port, host: port })
        } else
          if (typeof port === 'object') {
            container.withExposedPorts(port)
          }

        if (env) {
          container.withEnvironment(env)
        }

        console.log('Container %s starting...', name)

        return container.start()
      })
  )).forEach(container => {
    process.once('beforeExit', () => container.stop())
  })
}

const initDb = async () => {
  const knex = createKnex({
    useNullAsDefault: true,
    debug: true,
    client: "pg",
    connection: {
      host: "localhost",
      user: 'postgres',
      password: 'postgres',
    }
  })

  console.log('Initializing "checkyourstaff" database')
  await knex.raw('CREATE USER checkyourstaff WITH PASSWORD \'Nu9ifPc9U3\';')
  await knex.raw('CREATE DATABASE checkyourstaff WITH OWNER = checkyourstaff;')
  await knex.raw('GRANT ALL PRIVILEGES ON DATABASE checkyourstaff TO checkyourstaff;')

  console.log('Initializing "pincodes" database')
  await knex.raw('CREATE USER pincodes WITH PASSWORD \'YOMdaH5kzLQ\';')
  await knex.raw('CREATE DATABASE pincodes WITH OWNER = pincodes;')
  await knex.raw('GRANT ALL PRIVILEGES ON DATABASE pincodes TO pincodes;')
}

const applyMigrations = () => Promise.all([
  within(async () => {
    $.cwd = ('./persistence')

    await $`npm run migrate:latest`
  }),
  within(async () => {
    $.cwd = ('./pincodes-service')

    await $`npm run migrate:latest`
  })
])

const applySeeds = () => within(async () => {
  $.cwd = ('./persistence')

  await $`npm run seed:run`
})

const startServices = async ({ only }) => {
  const all = [
    'console',
    'console-backend',
    'webapp',
    'webapp-backend',
    'pincodes-service',
    'polling-bot',
    'control-bot',
    'workers',
  ]

  if (only) {
    only = [only].flat()
    only = only.filter(project => all.indexOf(project) >= 0)

    await npmDev(only)
  } else {
    await npmDev(all)
  }
}

const startTunnels = async () => {
  await Promise.all(
    Object.entries({
      'console-backend-checkyourstaff': 3001,
      'webapp-backend-checkyourstaff': 3003,
      'console-checkyourstaff': 5174,
      'webapp-checkyourstaff': 5173
    }).map(([hostname, port]) => startLoophole(port, hostname))
  )
}

// MAIN

console.group('Starting containers...')
await startContainers(onlySpinDb ? ['postgres', 'dpage/pgadmin4'] : undefined)
console.groupEnd()

console.group('Initializing database...')
await initDb()
console.groupEnd()

console.group('Applying migrations...')
await applyMigrations()
console.groupEnd()

console.group('Applying seeds...')
await applySeeds()
console.groupEnd()

if (!onlySpinDb) {
  console.group('Starting services...')
  await startServices({ only })
  console.groupEnd()

  if (skipTunnels) {
    console.group('Starting tunnels...')
    await startTunnels()
    console.groupEnd()
  }
}

console.log('Up and running')

setInterval(() => { }, 1000)
